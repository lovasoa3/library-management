openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22001
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDAte
          description: Filtrer les livres avec la date de sortie superieur ou egale a la date
          required: false
          schema: 
            type: string
            format: date
        - in: query
          name: endDate
          description: filtrer les livres avec la date de sortie inferieur
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /Authors:
    get:
      tags:
        - Authors
      summary: get list of Authors
      operationId: get authorName
      description: return list name of Authors
      parameters:
        - name: authorName
          in: query
          description: filtrer return Authors by given name
          schema:
            type: string
          required: false
      responses:
        200:
          description: the list of authors filtered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Authors"
    put:
      tags:
        - Authors
      summary: create or update authors
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Authors"
      responses:
        200:
          description: the list of create and update authors
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Authors"
  /authors/{aId}:
    delete:
      tags:
        - Authors
      summary: delete author
      operationId: deleteAuthor
      parameters:
        - name: aId
          in: path
          description: id of authors to be delete
          schema:
            type: string
          required: true
              

            
      responses:
        200:
          description: delete of authors is succes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Authors"




    
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        author: 
          $ref: "#/components/schemas/Authors"
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

    Authors:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: "#/components/schemas/Authors"

    Sex:
      type: string
      enum:
        - M
        - F
          
          