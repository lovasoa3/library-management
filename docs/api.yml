openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22097
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDAte
          description: Filtrer les livres avec la date de sortie superieur ou egale a la date
          required: false
          schema: 
            type: string
            format: date
        - in: query
          name: endDate
          description: filtrer les livres avec la date de sortie inferieur
          required: false
          schema:
            type: string
            format: date
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pathPagination"
      responses:
        200:
          $ref: "#/components/schemas/bookListBody"
        400:
          $ref: "#/components/schemas/BadRequestBody"
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: "#/components/schemas/bookListBody"
        400:
          $ref: "#/components/schemas/BadRequestBody"
  /Authors:
    get:
      tags:
        - Authors
      summary: get list of Authors
      operationId: get authorName
      description: return list name of Authors
      parameters:
        - name: authorName
          in: query
          description: filtrer return Authors by given name
          schema:
            type: string
          required: false
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pathPagination"
      responses:
        200:
          description: the list of authors filtered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Authors"
    put:
      tags:
        - Authors
      summary: create or update authors
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Authors"
      responses:
        200:
          description: the list of create and update authors
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Authors"
  /authors/{aId}:
    delete:
      tags:
        - Authors
      summary: delete author
      operationId: deleteAuthor
      parameters:
        - name: aId
          in: path
          description: id of authors to be delete
          schema:
            type: string
          required: true     
      responses:
        200:
          description: delete of authors is succes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Authors"

  /books/{bookId}/authors/{authorId}:
    put:
      summary: update author of one books
      description: |
        return update of author and books by bookId and authorId
      parameters:
        - in: path
          name: bookId
          required: true
          schema: 
            type: string
        - in: path
          name: authorId
          required: true
          schema: 
            type: string
      responses:
        200:
          $ref: "#/components/schemas/bookListBody"
        400:
          $ref: "#/components/schemas/BadRequestBody"
  /books/author:
    put:
      tags:
        - "updateBookAuthors"
      summary: update relation of book and author
      requestBody:
        description: list object updateBookAuthor
        required: true
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: "#/components/schemas/updateBookAuthor"
      responses:
        200:
          description: update of relation beetwin books and author succesfully
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/updateBookAuthor"
                   
  /authorTopic:
    get:
      tags:
        - "authorTopic"
      summary: get list authorstopic 
      operationId: get topicName
      description: return list of authortopic
      parameters:
        - in: query
          name: authortopicName
          required: false
          schema: 
            type: string
      responses:
        200:
          description: list of authortopic
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/authorTopic"

components:
  responses:
    Booklist_200:
      description: list if book
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/bookListBody"
    400:
      description: BAD REQUEST
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestBody"       
  schemas:
    responseStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
    ResponseBodyTemplate:
      type: object
      properties:
        status: 
          $ref: "#/components/schemas/responseStatus"
        body: 
          type: object
    bookListBody:
      allOf:
        - $ref: "#/components/schemas/ResponseBodyTemplate"
        - properties:
            body:
              type: array
              items:
                 $ref: "#/components/schemas/Book"
    BadRequestBody:
      allOf:  
      $ref: "#/components/schemas/ResponseBodyTemplate"
      example:
        status:
          code: 400
          message:  BAD REQUEST 
        body: { }

    Book:
      description: representation book with author
      allOf:
        - $ref: "#/components/schemas/crupdateBook"
      properties:
        Authors: 
          $ref: "#/components/schemas/Authors"
    Authors:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: "#/components/schemas/Authors"
    Sex:
      type: string
      enum:
        - M
        - F
    crupdateBook:
      description: representation of book
      properties:
        BookID:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    
    updateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
  
    authorTopic:
      description: representation author topic
      allOf:
        - $ref: "#/components/schemas/Authors"
      properties:
        topicName: 
          type: string 

    visiteur:
      type: object
      properties:
        ID: 
          type: string
        name: 
          type: string
        reference:
          type: string 
    actionVisituer:
      type: object
      properties:
        choixPossible:
          enum:
            - emprunter
            - rendu
        id_Book:
          type: string
        visiteur:
          $ref: "#/components/schemas/visiteur"

         


  parameters:
    page:
        in: query
        name: page
        schema:
          type: integer
          default:  1
        required: false
    pageSize:
        in: query
        name: pagesize
        schema:
          type: integer
          default:  50

    pathPagination:
      name: pathPagination
      in: path
      required: true
      schema:
        type: object
        properties:
          page: 
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
  
    

 

     