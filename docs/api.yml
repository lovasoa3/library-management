openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22001
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: startDAte
          description: Filtrer les livres avec la date de sortie superieur ou egale a la date
          required: false
          schema: 
            type: string
            format: date
        - in: query
          name: endDate
          description: filtrer les livres avec la date de sortie inferieur
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description:  page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: number of items page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /Authors:
    get:
      tags:
        - Authors
      summary: get list of Authors
      operationId: get authorName
      description: return list name of Authors
      parameters:
        - name: authorName
          in: query
          description: filtrer return Authors by given name
          schema:
            type: string
          required: false
        - name: page
          in: path
          description: page number for pagination
          required: true
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: path
          description: number of items page
          required: true
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: the list of authors filtered
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Authors"
    put:
      tags:
        - Authors
      summary: create or update authors
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Authors"
      responses:
        200:
          description: the list of create and update authors
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Authors"
  /authors/{aId}:
    delete:
      tags:
        - Authors
      summary: delete author
      operationId: deleteAuthor
      parameters:
        - name: aId
          in: path
          description: id of authors to be delete
          schema:
            type: string
          required: true     
      responses:
        200:
          description: delete of authors is succes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Authors"

  /books/{bookId}/authors/{authorId}:
    put:
      summary: update author of one books
      description: |
        return update of author and books by bookId and authorId
      parameters:
        - in: path
          name: bookId
          required: true
          schema: 
            type: string
        - in: path
          name: authorId
          required: true
          schema: 
            type: string
      responses:
        200:
          description: update book with author succesfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /books/author:
    put:
      tags:
        - "updateBookAuthors"
      summary: update relation of book and author
      requestBody:
        description: list object updateBookAuthor
        required: true
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: "#/components/schemas/updateBookAuthor"
      responses:
        200:
          description: update of relation beetwin books and author succesfully
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: "#/components/schemas/updateBookAuthor"
  /Topic:
    get:
      tags:
        - "topic"
      summary: get list topic 
      operationId: get topicName
      description: return list of topic
      parameters:
        - in: query
          name: topicName
          required: false
          schema: 
            type: string
      responses:
        200:
          description: list of topic
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/topic"
    put:
      tags:
        - "topic"
      summary: update list of topic
      operationId: updateTopic
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/topic"
      responses:
        200:
          description: the list of  update topic
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/topic"
  /topic/{TopicId}:
    delete:
      tags:
        - topic
      summary: delete topic
      operationId: topicAuthor
      parameters:
        - name: TopicId
          in: path
          description: id of topic to be delete
          schema:
            type: string
          required: true     
      responses:
        200:
          description: delete of topic is succes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/topic"


components:
  schemas:
    Book:
      description: representation book with author
      allOf:
        - $ref: "#/components/schemas/crupdateBook"
      properties:
        Authors: 
          $ref: "#/components/schemas/Authors"
    Authors:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          $ref: "#/components/schemas/Authors"
    Sex:
      type: string
      enum:
        - M
        - F

    crupdateBook:
      description: representation of book
      properties:
        BookID:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    
    updateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    topic:
      type: object
      properties:
        id:
          type: string
        topicName:
          type: string
          
          